
.functor minus(x:number,y:number):number
.functor plus(x:number,y:number):number
.functor mul(x:number,y:number):number
.functor cnt():number


.decl args(x:number, y:number)

args(1, 1).
args(2, 2).

.decl minus_res(x:number)
.output minus_res ()

minus_res(r) :- args(x,y), @minus(x,y) = r.

.decl plus_res(x:number)
.output plus_res ()

plus_res(r) :- args(x,y), @plus(x,y) = r.

.decl mul_res(x:number)
.output mul_res ()

mul_res(r) :- args(x,y), @mul(x,y) = r.

.decl C(x:number)
.output C()

C(c) :-
    mul_res(_),
    c = @cnt().


.type Point = [x:number, y:number]
.functor point_plus(x:Point, y:Point):Point stateful

.decl point_args(x:Point, y:Point)

point_args([0,1],[2,3]).
point_args([2,2], [40,40]).

.decl point_plus_res(p:Point)
.output point_plus_res ()

point_plus_res(p) :-
    point_args(x,y),
    p = @point_plus(x,y).